"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = _promise2.default))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var logger_1 = require("./logger");
var entity_1 = require("./entity");
var retryingqueue_1 = require("./retryingqueue");
var listitem_1 = require("./listitem");
var paginator_1 = require("./paginator");
var cache_1 = require("./cache");
/**
 * @class
 * @alias List
 * @classdesc Represents a Sync List, which stores an ordered list of values.
 * @property {String} sid - List unique id, immutable identifier assigned by the system
 * @property {String} [uniqueName=null] - List unique name, immutable identifier that can be assigned to list during creation
 *
 * @fires List#collectionRemoved
 * @fires List#collectionRemovedRemotely
 * @fires List#itemAdded
 * @fires List#itemAddedRemotely
 * @fires List#itemRemoved
 * @fires List#itemRemovedRemotely
 * @fires List#itemUpdated
 * @fires List#itemUpdatedRemotely
 */

var SyncList = function (_entity_1$SyncEntity) {
    (0, _inherits3.default)(SyncList, _entity_1$SyncEntity);

    /**
     * @private
     */
    function SyncList(services, descriptor, removalHandler) {
        (0, _classCallCheck3.default)(this, SyncList);

        var _this = (0, _possibleConstructorReturn3.default)(this, (SyncList.__proto__ || (0, _getPrototypeOf2.default)(SyncList)).call(this, services, removalHandler));

        _this.actionQueue = new retryingqueue_1.RetryingQueue();
        _this.cache = new cache_1.Cache();
        _this.descriptor = descriptor;
        return _this;
    }
    // private props


    (0, _createClass3.default)(SyncList, [{
        key: "__set",
        value: function __set(location, param) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var response;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this.services.network.post(location, { data: param.data }, param.revision);

                            case 2:
                                response = _context.sent;

                                response.body.data = param.data;
                                return _context.abrupt("return", response.body);

                            case 5:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
        /**
         * Add a new item to the list.
         * @param {Object} value Value to be added
         * @returns {Promise<ListItem>} A newly added item.
         * @public
         */

    }, {
        key: "push",
        value: function push(value) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                var response, index, item;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return this.services.network.post(this.links.items, { data: value });

                            case 2:
                                response = _context2.sent;
                                index = Number(response.body.index);
                                item = this.cache.store(index, new listitem_1.ListItem({ index: index,
                                    revision: response.body.revision,
                                    lastEventId: response.body.last_event_id,
                                    uri: response.body.url,
                                    value: value }), response.body.last_event_id);

                                this.emit('itemAdded', item, true);
                                return _context2.abrupt("return", item);

                            case 7:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));
        }
        /**
         * Assign new value to an existing item, given its index.
         * @param {Number} index Index of an item to be updated
         * @param {Object} value New value to be assigned to an item
         * @returns {Promise<ListItem>} A promise with updated item containing latest known value.
         * A promise will be rejected if value was remotely modified.
         * @public
         */

    }, {
        key: "set",
        value: function set(index, value) {
            return this._actualSet(index, value);
        }
        /**
         * @private
         */

    }, {
        key: "_actualSet",
        value: function _actualSet(index, value, resolver) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
                var _this2 = this;

                var item, updatedItemDescriptor, _resolver;

                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                _context4.next = 2;
                                return this.get(index);

                            case 2:
                                item = _context4.sent;
                                updatedItemDescriptor = void 0;

                                if (resolver) {
                                    _context4.next = 10;
                                    break;
                                }

                                _context4.next = 7;
                                return this.__set(item.uri, { data: value, revision: undefined });

                            case 7:
                                updatedItemDescriptor = _context4.sent;
                                _context4.next = 14;
                                break;

                            case 10:
                                _resolver = function _resolver(err) {
                                    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                                        var refreshedItem;
                                        return _regenerator2.default.wrap(function _callee3$(_context3) {
                                            while (1) {
                                                switch (_context3.prev = _context3.next) {
                                                    case 0:
                                                        if (!(err.status === 412)) {
                                                            _context3.next = 5;
                                                            break;
                                                        }

                                                        _context3.next = 3;
                                                        return this._get(item.index);

                                                    case 3:
                                                        refreshedItem = _context3.sent;
                                                        return _context3.abrupt("return", {
                                                            revision: refreshedItem.revision,
                                                            data: resolver(utils_1.deepClone(refreshedItem.value))
                                                        });

                                                    case 5:
                                                        throw err;

                                                    case 6:
                                                    case "end":
                                                        return _context3.stop();
                                                }
                                            }
                                        }, _callee3, this);
                                    }));
                                };

                                _context4.next = 13;
                                return this.actionQueue.add(this.__set.bind(this), item.uri, { revision: item.revision, data: value }, _resolver);

                            case 13:
                                updatedItemDescriptor = _context4.sent;

                            case 14:
                                item = this.cache.get(item.index);
                                if (item && updatedItemDescriptor.last_event_id > item.lastEventId) {
                                    item.update(updatedItemDescriptor.last_event_id, updatedItemDescriptor.revision, updatedItemDescriptor.data);
                                    this.emit('itemUpdated', item, true);
                                }
                                return _context4.abrupt("return", item);

                            case 17:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));
        }
        /**
         * Modify an existing item by applying a mutation function to it.
         * @param {Number} index Index of an item to be changed
         * @param {List~Mutator} mutator A function that outputs a new value based on the existing value
         * @returns {Promise<ListItem>} A promise with a modified item containing latest known value.
         * A promise will be rejected if an item was not found.
         * @public
         */

    }, {
        key: "mutate",
        value: function mutate(index, mutator) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
                var item;
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                _context5.next = 2;
                                return this.get(index);

                            case 2:
                                item = _context5.sent;
                                return _context5.abrupt("return", this._actualSet(index, mutator(utils_1.deepClone(item.value)), mutator));

                            case 4:
                            case "end":
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));
        }
        /**
         * Modify an existing item by appending new fields (or overwriting existing ones) with the values from Object.
         * @param {Number} index Index of an item to be changed
         * @param {Object} obj Set of fields to update
         * @returns {Promise<ListItem>} A promise with a modified item containing latest known value.
         * A promise will be rejected if an item was not found.
         * @public
         */

    }, {
        key: "update",
        value: function update(index, obj) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                return _context6.abrupt("return", this.mutate(index, function (remote) {
                                    return (0, _extends3.default)(remote, obj);
                                }));

                            case 1:
                            case "end":
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));
        }
        /**
         * Delete an item, given its key.
         * @param {number} index Index of an item to be removed
         * @returns {Promise<void>} A promise to remove an item.
         * A promise will be rejected if an item was not found.
         * @public
         */

    }, {
        key: "remove",
        value: function remove(index) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
                var item, response;
                return _regenerator2.default.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                _context7.next = 2;
                                return this.get(index);

                            case 2:
                                item = _context7.sent;
                                _context7.next = 5;
                                return this.services.network.delete(item.uri);

                            case 5:
                                response = _context7.sent;

                                this.cache.delete(index, response.body.last_event_id);
                                this.emit('itemRemoved', index, true);

                            case 8:
                            case "end":
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));
        }
        /**
         * Retrieve an item by List key.
         * @param {Number} index Item index in a List
         * @returns {Promise<ListItem>} A promise with an item containing latest known value.
         * A promise will be rejected if an item was not found.
         * @public
         */

    }, {
        key: "get",
        value: function get(index) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee8() {
                var cachedItem;
                return _regenerator2.default.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                cachedItem = this.cache.get(index);

                                if (!cachedItem) {
                                    _context8.next = 3;
                                    break;
                                }

                                return _context8.abrupt("return", cachedItem);

                            case 3:
                                return _context8.abrupt("return", this._get(index));

                            case 4:
                            case "end":
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));
        }
    }, {
        key: "_get",
        value: function _get(index) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee9() {
                var result;
                return _regenerator2.default.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                _context9.next = 2;
                                return this.queryItems({ index: index });

                            case 2:
                                result = _context9.sent;

                                if (!(result.items.length < 1)) {
                                    _context9.next = 5;
                                    break;
                                }

                                throw new Error('No item with index ' + index + ' found');

                            case 5:
                                return _context9.abrupt("return", result.items[0]);

                            case 6:
                            case "end":
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));
        }
        /**
         * Query items from the List
         * @private
         */

    }, {
        key: "queryItems",
        value: function queryItems(arg) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee10() {
                var _this3 = this;

                var url, response, items, meta;
                return _regenerator2.default.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                arg = arg || {};
                                url = new utils_1.UriBuilder(this.links.items).queryParam('From', arg.from).queryParam('PageSize', arg.limit).queryParam('Index', arg.index).queryParam('PageToken', arg.pageToken).queryParam('Order', arg.order).build();
                                _context10.next = 4;
                                return this.services.network.get(url);

                            case 4:
                                response = _context10.sent;
                                items = response.body.items.map(function (el) {
                                    var itemInCache = _this3.cache.get(el.index);
                                    if (itemInCache) {
                                        _this3._handleItemUpdated(el.index, el.url, el.last_event_id, el.revision, el.data);
                                    } else {
                                        _this3.cache.store(Number(el.index), new listitem_1.ListItem({ index: Number(el.index),
                                            uri: el.url,
                                            revision: el.revision,
                                            lastEventId: el.last_event_id,
                                            value: el.data }), el.last_event_id);
                                    }
                                    return _this3.cache.get(el.index);
                                });
                                meta = response.body.meta;
                                return _context10.abrupt("return", new paginator_1.Paginator(items, function (pageToken) {
                                    return _this3.queryItems({ pageToken: pageToken });
                                }, meta.previous_token, meta.next_token));

                            case 8:
                            case "end":
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));
        }
        /**
         * Query a list of items from collection.
         * @param {Object} args Arguments for query
         * @param {Number} args.from Item, which should be used as an anchor. If undefined, starts from the beginning or end depending on args.order
         * @param {Number} args.pageSize Results page size
         * @param {String} args.order Lexicographical order of results, should be 'asc' or 'desc'
         * @returns {Promise<Paginator<ListItem>>}
         * @public
         */

    }, {
        key: "getItems",
        value: function getItems(args) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee11() {
                return _regenerator2.default.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                args = args || {};
                                args.limit = args.pageSize || args.limit || 50;
                                args.order = args.order || 'asc';
                                return _context11.abrupt("return", this.queryItems(args));

                            case 4:
                            case "end":
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));
        }
        /**
         * @return {Promise<Object>} Context of List
         * @private
         */

    }, {
        key: "getContext",
        value: function getContext() {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee12() {
                var response;
                return _regenerator2.default.wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                if (this.context) {
                                    _context12.next = 5;
                                    break;
                                }

                                _context12.next = 3;
                                return this.services.network.get(this.links.context);

                            case 3:
                                response = _context12.sent;

                                // store fetched context if we have't received any newer update
                                if (!this.context || response.body.last_event_id > this.lastEventId) {
                                    this.context = response.body.data;
                                }

                            case 5:
                                return _context12.abrupt("return", this.context);

                            case 6:
                            case "end":
                                return _context12.stop();
                        }
                    }
                }, _callee12, this);
            }));
        }
        /**
         * @private
         */

    }, {
        key: "updateContext",
        value: function updateContext(context) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee13() {
                return _regenerator2.default.wrap(function _callee13$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                _context13.prev = 0;
                                _context13.next = 3;
                                return this.services.network.post(this.links.context, { data: context });

                            case 3:
                                this.context = context;
                                this.emit('contextUpdated', context, true);
                                return _context13.abrupt("return", this);

                            case 8:
                                _context13.prev = 8;
                                _context13.t0 = _context13["catch"](0);

                                logger_1.default.error('Failed to update context', _context13.t0);
                                throw _context13.t0;

                            case 12:
                            case "end":
                                return _context13.stop();
                        }
                    }
                }, _callee13, this, [[0, 8]]);
            }));
        }
        /**
         * Delete this list. It will be impossible to restore it.
         * @return {Promise<void>} A promise that resolves when the list has been deleted.
         * @public
         */

    }, {
        key: "removeList",
        value: function removeList() {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee14() {
                return _regenerator2.default.wrap(function _callee14$(_context14) {
                    while (1) {
                        switch (_context14.prev = _context14.next) {
                            case 0:
                                _context14.next = 2;
                                return this.services.network.delete(this.uri);

                            case 2:
                                this.onRemoved(true);

                            case 3:
                            case "end":
                                return _context14.stop();
                        }
                    }
                }, _callee14, this);
            }));
        }
    }, {
        key: "onRemoved",
        value: function onRemoved(locally) {
            this._unsubscribe();
            this.removalHandler(this.type, this.sid, this.uniqueName);
            // Should also do some cleanup here
            this.emit('collectionRemoved', locally);
            if (!locally) {
                this.emit('collectionRemovedRemotely');
            }
        }
    }, {
        key: "shouldIgnoreEvent",
        value: function shouldIgnoreEvent(key, eventId) {
            return this.cache.isKnown(key, eventId);
        }
        /**
         * Handle update, which came from the server
         * @private
         */

    }, {
        key: "_update",
        value: function _update(update, isStrictlyOrdered) {
            var itemIndex = Number(update.item_index);
            switch (update.type) {
                case 'list_item_added':
                    {
                        this._handleItemAdded(itemIndex, update.item_url, update.id, update.item_revision, update.item_data);
                    }
                    break;
                case 'list_item_updated':
                    {
                        this._handleItemUpdated(itemIndex, update.item_url, update.id, update.item_revision, update.item_data);
                    }
                    break;
                case 'list_item_removed':
                    {
                        this._handleItemRemoved(itemIndex, update.id, update.item_data);
                    }
                    break;
                case 'list_context_updated':
                    {
                        this._handleContextUpdate(update.context_data, update.id);
                    }
                    break;
                case 'list_removed':
                    {
                        this.onRemoved(false);
                    }
                    break;
            }
            if (isStrictlyOrdered) {
                this._advanceLastEventId(update.id, update.list_revision);
            }
        }
    }, {
        key: "_advanceLastEventId",
        value: function _advanceLastEventId(eventId, revision) {
            if (this.lastEventId < eventId) {
                this.descriptor.last_event_id = eventId;
                if (revision) {
                    this.descriptor.revision = revision;
                }
            }
        }
        /**
         * Handle item insertion event, coming from server
         * @private
         */

    }, {
        key: "_handleItemAdded",
        value: function _handleItemAdded(index, uri, eventId, revision, value) {
            if (!this.cache.isKnown(index, eventId)) {
                var item = new listitem_1.ListItem({ index: index, uri: uri, lastEventId: eventId, revision: revision, value: value });
                this.cache.store(index, item, eventId);
                this.emit('itemAdded', item, false);
                this.emit('itemAddedRemotely', item);
            }
        }
        /**
         * Handle new value of item, coming from server
         * @private
         */

    }, {
        key: "_handleItemUpdated",
        value: function _handleItemUpdated(index, uri, eventId, revision, value) {
            var item = this.cache.get(index);
            if (!item && !this.shouldIgnoreEvent(index, eventId)) {
                item = this.cache.store(index, new listitem_1.ListItem({ index: index, uri: uri, lastEventId: eventId, revision: revision, value: value }), eventId);
                this.emit('itemUpdated', item, false);
                this.emit('itemUpdatedRemotely', item);
            } else if (item && eventId > item.lastEventId) {
                item.update(eventId, revision, value);
                this.emit('itemUpdated', item, false);
                this.emit('itemUpdatedRemotely', item);
            }
        }
    }, {
        key: "_handleItemRemoved",
        value: function _handleItemRemoved(index, eventId, oldData) {
            this.cache.delete(index, eventId);
            this.emit('itemRemoved', index, false);
            this.emit('itemRemovedRemotely', index, oldData);
        }
    }, {
        key: "_handleContextUpdate",
        value: function _handleContextUpdate(data, eventId) {
            if (this.lastEventId < eventId) {
                this.context = data;
                this.emit('contextUpdated', data, false);
                this.emit('contextUpdatedRemotely', data);
            }
        }
    }, {
        key: "uri",
        get: function get() {
            return this.descriptor.url;
        }
    }, {
        key: "revision",
        get: function get() {
            return this.descriptor.revision;
        }
    }, {
        key: "lastEventId",
        get: function get() {
            return this.descriptor.last_event_id;
        }
    }, {
        key: "links",
        get: function get() {
            return this.descriptor.links;
        }
    }, {
        key: "type",
        get: function get() {
            return 'list';
        }
        // public props, documented along with class description

    }, {
        key: "sid",
        get: function get() {
            return this.descriptor.sid;
        }
    }, {
        key: "uniqueName",
        get: function get() {
            return this.descriptor.unique_name || null;
        }
    }], [{
        key: "type",
        get: function get() {
            return 'list';
        }
    }]);
    return SyncList;
}(entity_1.SyncEntity);

exports.SyncList = SyncList;
exports.default = SyncList;
/**
 * Applies a transformation to the item value. May be called multiple times on the
 * same datum in case of collisions with remote code.
 * @callback List~Mutator
 * @param {Object} data The current value of the item in the cloud.
 * @return {Object} The desired new value for the item.
 */
/**
 * Fired when a new item appears in the list, whether its creator was local or remote.
 * @event List#itemAdded
 * @param {ListItem} - Added item
 * @param {Boolean} - Equals 'true' if item was added by local actor, 'false' otherwise
 */
/**
 * Fired when remote code adds a new item to the list.
 * @event List#itemAddedRemotely
 * @param {ListItem} - Added item
 */
/**
 * Fired when a list item is updated (not added or removed, but changed), whether the updater was local or remote.
 * @event List#itemUpdated
 * @param {ListItem} - Updated item
 * @param {Boolean} - Equals 'true' if item was updated by local actor, 'false' otherwise
 */
/**
 * Fired when a remote actor updates a list item.
 * @event List#itemUpdatedRemotely
 * @param {ListItem} - Updated item
 */
/**
 * Fired when a list item is removed, whether the remover was local or remote.
 * @event List#itemRemoved
 * @param {Number} - An index of removed item
 * @param {Boolean} - Equals 'true' if item was removed by local actor, 'false' otherwise
 */
/**
 * Fired when a remote actor removes a list item.
 * @event List#itemRemovedRemotely
 * @param {Number} - An index of removed item
 * @param {Object} - A snapshot of item data before removal
 */
/**
 * Fired when a list is deleted entirely, by any actor local or remote.
 * @event List#collectionRemoved
 * @param {Boolean} - Equals 'true' if list was removed by local actor, 'false' otherwise
 */
/**
 * Fired when remote code deletes a list.
 * @event List#collectionRemovedRemotely
 */