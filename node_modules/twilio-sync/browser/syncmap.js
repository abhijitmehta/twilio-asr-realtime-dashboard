"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = _promise2.default))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var entity_1 = require("./entity");
var retryingqueue_1 = require("./retryingqueue");
var mapitem_1 = require("./mapitem");
var paginator_1 = require("./paginator");
var cache_1 = require("./cache");
/**
 * @class
 * @alias Map
 * @classdesc Represents a Sync Map, which stores an unordered set of key:value pairs.
 * @property {String} sid An immutable identifier (a SID) assigned by the system on creation.
 * @property {String} [uniqueName=null] - An optional immutable identifier that may be assigned by the
 * programmer to this map on creation. Unique among other Maps.
 *
 *
 * @fires Map#collectionRemoved
 * @fires Map#collectionRemovedRemotely
 * @fires Map#itemAdded
 * @fires Map#itemAddedRemotely
 * @fires Map#itemRemoved
 * @fires Map#itemRemovedRemotely
 * @fires Map#itemUpdated
 * @fires Map#itemUpdatedRemotely
 */

var SyncMap = function (_entity_1$SyncEntity) {
    (0, _inherits3.default)(SyncMap, _entity_1$SyncEntity);

    /**
     * @private
     */
    function SyncMap(services, descriptor, removalHandler) {
        (0, _classCallCheck3.default)(this, SyncMap);

        var _this = (0, _possibleConstructorReturn3.default)(this, (SyncMap.__proto__ || (0, _getPrototypeOf2.default)(SyncMap)).call(this, services, removalHandler));

        _this.actionQueue = new retryingqueue_1.RetryingQueue();
        _this.cache = new cache_1.Cache();
        _this.descriptor = descriptor;
        if (descriptor.items) {
            descriptor.items.forEach(function (itemDescriptor) {
                _this.cache.store(itemDescriptor.key, new mapitem_1.MapItem(itemDescriptor), itemDescriptor.last_event_id);
            });
        }
        return _this;
    }
    // private props


    (0, _createClass3.default)(SyncMap, [{
        key: "_get",
        value: function _get(key) {
            return this.queryItems({ key: key }).then(function (result) {
                if (result.items.length < 1) {
                    throw new Error('No item with key ' + key + ' found');
                }
                return result.items[0];
            });
        }
    }, {
        key: "__set",
        value: function __set(location, param) {
            return this.services.network.post(location, { data: param.data }, param.revision).then(function (response) {
                response = response.body;
                response.data = param.data;
                return response;
            });
        }
        /**
         * Update known existing element
         * @private
         */

    }, {
        key: "_set",
        value: function _set(location, keyValue, resolver) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                var _this2 = this;

                var _resolver;

                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                if (resolver) {
                                    _context2.next = 2;
                                    break;
                                }

                                return _context2.abrupt("return", this.__set(location, { data: keyValue.data }));

                            case 2:
                                _resolver = function _resolver(err) {
                                    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                                        var item;
                                        return _regenerator2.default.wrap(function _callee$(_context) {
                                            while (1) {
                                                switch (_context.prev = _context.next) {
                                                    case 0:
                                                        if (!(err.status === 412)) {
                                                            _context.next = 5;
                                                            break;
                                                        }

                                                        _context.next = 3;
                                                        return this._get(keyValue.key);

                                                    case 3:
                                                        item = _context.sent;
                                                        return _context.abrupt("return", {
                                                            revision: item.revision,
                                                            data: resolver(utils_1.deepClone(item.value))
                                                        });

                                                    case 5:
                                                        throw err;

                                                    case 6:
                                                    case "end":
                                                        return _context.stop();
                                                }
                                            }
                                        }, _callee, this);
                                    }));
                                };

                                return _context2.abrupt("return", this.actionQueue.add(this.__set.bind(this), location, { revision: keyValue.revision, data: keyValue.data }, _resolver));

                            case 4:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));
        }
        /**
         * Create element or update if already existing
         * @private
         */

    }, {
        key: "_tryAddOrUpdate",
        value: function _tryAddOrUpdate(uri, keyValue, resolver) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                var response, existingItemLocation, value, _response, resolvedData, _value;

                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.prev = 0;
                                _context3.next = 3;
                                return this.services.network.post(uri, keyValue);

                            case 3:
                                response = _context3.sent;

                                response.body.data = keyValue.data;
                                return _context3.abrupt("return", { added: true, value: response.body });

                            case 8:
                                _context3.prev = 8;
                                _context3.t0 = _context3["catch"](0);

                                if (!(_context3.t0.status !== 409)) {
                                    _context3.next = 12;
                                    break;
                                }

                                throw _context3.t0;

                            case 12:
                                existingItemLocation = _context3.t0.body.links.item;

                                if (resolver) {
                                    _context3.next = 20;
                                    break;
                                }

                                _context3.next = 16;
                                return this._set(existingItemLocation, keyValue, resolver);

                            case 16:
                                value = _context3.sent;
                                return _context3.abrupt("return", { added: false, value: value });

                            case 20:
                                _context3.next = 22;
                                return this.services.network.get(existingItemLocation);

                            case 22:
                                _response = _context3.sent;
                                resolvedData = resolver(utils_1.deepClone(_response.body.data));
                                _context3.next = 26;
                                return this._set(existingItemLocation, {
                                    key: _response.body.key,
                                    revision: _response.body.revision,
                                    data: resolvedData
                                }, resolver);

                            case 26:
                                _value = _context3.sent;
                                return _context3.abrupt("return", { added: false, value: _value });

                            case 28:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this, [[0, 8]]);
            }));
        }
        /**
         * @return Promise<Object> Context of collection
         * @private
         */

    }, {
        key: "getContext",
        value: function getContext() {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
                var response;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                if (this.context) {
                                    _context4.next = 5;
                                    break;
                                }

                                _context4.next = 3;
                                return this.services.network.get(this.links.context);

                            case 3:
                                response = _context4.sent;

                                // store fetched context if we have't received any newer update
                                if (!this.context || response.body.last_event_id > this.lastEventId) {
                                    this.context = response.body.data;
                                }

                            case 5:
                                return _context4.abrupt("return", this.context);

                            case 6:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));
        }
        /**
         * @param context {Object} New context value
         * @returns {Promise}
         * @private
         */

    }, {
        key: "updateContext",
        value: function updateContext(context) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                _context5.next = 2;
                                return this.services.network.post(this.links.context, { data: context });

                            case 2:
                                this.context = context;
                                this.emit('contextUpdated', context, true);

                            case 4:
                            case "end":
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));
        }
        /**
         * Add a new item to the map with the given key:value pair. Overwrites any value that might already exist at that key.
         * @param {String} key Unique item identifier
         * @param {Object} value Value to be set
         * @returns {Promise<MapItem>} Newly added item, or modified one if already exists, with the latest known value.
         * @public
         */

    }, {
        key: "set",
        value: function set(key, value) {
            return this._actualSet(key, value);
        }
        /**
         * @private
         */

    }, {
        key: "_actualSet",
        value: function _actualSet(key, value, resolver) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
                var descriptor, added, item, arg, addOrUpdateResult;
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                descriptor = void 0;
                                added = void 0;
                                item = this.cache.get(key);

                                if (!item) {
                                    _context6.next = 11;
                                    break;
                                }

                                arg = { key: key, data: value, revision: item.revision || undefined };
                                _context6.next = 7;
                                return this._set(item.uri, arg, resolver);

                            case 7:
                                descriptor = _context6.sent;

                                added = false;
                                _context6.next = 16;
                                break;

                            case 11:
                                _context6.next = 13;
                                return this._tryAddOrUpdate(this.links.items, { key: key, data: value }, resolver);

                            case 13:
                                addOrUpdateResult = _context6.sent;

                                descriptor = addOrUpdateResult.value;
                                added = addOrUpdateResult.added;

                            case 16:
                                item = this.cache.get(key);
                                if (item && descriptor.last_event_id > item.lastEventId) {
                                    item.update(descriptor.last_event_id, descriptor.revision, descriptor.data);
                                    this.emit('itemUpdated', item, true);
                                } else if (!item) {
                                    item = this.cache.store(key, new mapitem_1.MapItem(descriptor), descriptor.last_event_id);
                                    if (added) {
                                        this.emit('itemAdded', item, true);
                                    } else {
                                        this.emit('itemUpdated', item, true);
                                    }
                                }
                                return _context6.abrupt("return", item);

                            case 19:
                            case "end":
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));
        }
        /**
         * Retrieve an item by key.
         * @param {String} key Identifies the desired item.
         * @returns {Promise<MapItem>} A promise that resolves when the item has been fetched.
         * This promise will be rejected if item was not found.
         * @public
         */

    }, {
        key: "get",
        value: function get(key) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
                var result;
                return _regenerator2.default.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                if (!this.cache.has(key)) {
                                    _context7.next = 2;
                                    break;
                                }

                                return _context7.abrupt("return", this.cache.get(key));

                            case 2:
                                _context7.next = 4;
                                return this.queryItems({ key: key });

                            case 4:
                                result = _context7.sent;

                                if (!(result.items.length < 1)) {
                                    _context7.next = 7;
                                    break;
                                }

                                throw new Error('No item with key ' + key + ' found');

                            case 7:
                                return _context7.abrupt("return", result.items[0]);

                            case 8:
                            case "end":
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));
        }
        /**
         * Schedules a modification to this document that will apply a mutation function.
         * @param {String} key selects the map item to be mutated.
         * @param {Map~Mutator} mutator A function that outputs a new value based on the existing value.
         * May be called multiple times, particularly if this Document is modified concurrently by remote code.
         * If the mutation ultimately succeeds, the Document will have made the particular transition described
         * by this function.
         * @returns {Promise<MapItem>} Resolves with the modified item, with its latest contents.
         * @public
         */

    }, {
        key: "mutate",
        value: function mutate(key, mutator) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee8() {
                var value;
                return _regenerator2.default.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                _context8.next = 2;
                                return this.get(key).then(function (item) {
                                    return item.value;
                                }).catch(function () {
                                    return {};
                                });

                            case 2:
                                value = _context8.sent;
                                return _context8.abrupt("return", this._actualSet(key, mutator(utils_1.deepClone(value)), mutator));

                            case 4:
                            case "end":
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));
        }
        /**
         * Modify the keyed map item by appending new fields (or by overwriting existing ones) with the values from
         * the provided Object. Creates a new item if no item by this key exists, copying all given fields and values
         * into it.
         * @param {String} key selects the map item to update.
         * @param {Object} obj Specifies the particular (top-level) attributes that will receive new values.
         * @returns {Promise<MapItem>} A promise resolving to the modified item in its new state.
         * @public
         */

    }, {
        key: "update",
        value: function update(key, obj) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee9() {
                return _regenerator2.default.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                return _context9.abrupt("return", this.mutate(key, function (remote) {
                                    return (0, _extends3.default)(remote, obj);
                                }));

                            case 1:
                            case "end":
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));
        }
        /**
         * Delete an item, given its key.
         * @param {String} key selects the item to delete.
         * @returns {Promise<void>} A promise to remove an item.
         * The promise will be rejected if 'key' is undefined or an item was not found.
         * @public
         */

    }, {
        key: "remove",
        value: function remove(key) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee10() {
                var item, response;
                return _regenerator2.default.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                if (!(typeof key === 'undefined')) {
                                    _context10.next = 2;
                                    break;
                                }

                                throw new Error('Key argument is invalid');

                            case 2:
                                _context10.next = 4;
                                return this.get(key);

                            case 4:
                                item = _context10.sent;
                                _context10.next = 7;
                                return this.services.network.delete(item.uri);

                            case 7:
                                response = _context10.sent;

                                this.cache.delete(key, response.body.last_event_id);
                                this.emit('itemRemoved', key, true);

                            case 10:
                            case "end":
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));
        }
        /**
         * @private
         */

    }, {
        key: "queryItems",
        value: function queryItems(args) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee11() {
                var _this3 = this;

                var uri, response, items, meta;
                return _regenerator2.default.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                args = args || {};
                                uri = new utils_1.UriBuilder(this.links.items).queryParam('From', args.from).queryParam('PageSize', args.limit).queryParam('Key', args.key).queryParam('PageToken', args.pageToken).queryParam('Order', args.order).build();
                                _context11.next = 4;
                                return this.services.network.get(uri);

                            case 4:
                                response = _context11.sent;
                                items = response.body.items.map(function (el) {
                                    var itemInCache = _this3.cache.get(el.key);
                                    if (itemInCache) {
                                        _this3._handleItemUpdated(el.key, el.url, el.last_event_id, el.revision, el.data);
                                    } else {
                                        _this3.cache.store(el.key, new mapitem_1.MapItem(el), el.last_event_id);
                                    }
                                    return _this3.cache.get(el.key);
                                });
                                meta = response.body.meta;
                                return _context11.abrupt("return", new paginator_1.Paginator(items, function (pageToken) {
                                    return _this3.queryItems({ pageToken: pageToken });
                                }, meta.previous_token, meta.next_token));

                            case 8:
                            case "end":
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));
        }
        /**
         * Get a complete list of items from the map.
         * @param {Object} args Arguments for query
         * @param {String} args.from Item, which should be used as an anchor. If undefined, starts from the beginning or end depending on args.order
         * @param {Number} args.pageSize Result page size
         * @param {String} args.order Lexicographical order of results, should be 'asc' or 'desc'
         * @return {Promise<Paginator<MapItem>>}
         * @public
         */

    }, {
        key: "getItems",
        value: function getItems(args) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee12() {
                return _regenerator2.default.wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                args = args || {};
                                args.limit = args.pageSize || args.limit || 50;
                                args.order = args.order || 'asc';
                                return _context12.abrupt("return", this.queryItems(args));

                            case 4:
                            case "end":
                                return _context12.stop();
                        }
                    }
                }, _callee12, this);
            }));
        }
        /**
         * Enumerate all items in this Map.
         * This always triggers server interaction when being called for the first time on a Map; this may be latent.
         * This method not supported now and not meant to be used externally.
         * @param {Function} handler Function to handle each argument
         * @private
         */

    }, {
        key: "forEach",
        value: function forEach(handler) {
            var _this4 = this;

            return new _promise2.default(function (resolve, reject) {
                function processPage(page) {
                    page.items.forEach(function (x) {
                        return handler(x);
                    });
                    if (page.hasNextPage) {
                        page.nextPage().then(processPage).catch(reject);
                    } else {
                        resolve();
                    }
                }
                _this4.queryItems().then(processPage).catch(reject);
            });
        }
    }, {
        key: "shouldIgnoreEvent",
        value: function shouldIgnoreEvent(key, eventId) {
            return this.cache.isKnown(key, eventId);
        }
        /**
         * Handle update from the server
         * @private
         */

    }, {
        key: "_update",
        value: function _update(update, isStrictlyOrdered) {
            switch (update.type) {
                case 'map_item_added':
                    {
                        this._handleItemAdded(update.item_key, update.item_url, update.id, update.item_revision, update.item_data);
                    }
                    break;
                case 'map_item_updated':
                    {
                        this._handleItemUpdated(update.item_key, update.item_url, update.id, update.item_revision, update.item_data);
                    }
                    break;
                case 'map_item_removed':
                    {
                        this._handleItemRemoved(update.item_key, update.id, update.item_data);
                    }
                    break;
                case 'map_context_updated':
                    {
                        this._handleContextUpdate(update.context_data, update.id);
                    }
                    break;
                case 'map_removed':
                    {
                        this.onRemoved(false);
                    }
                    break;
            }
            if (isStrictlyOrdered) {
                this._advanceLastEventId(update.id, update.map_revision);
            }
        }
    }, {
        key: "_advanceLastEventId",
        value: function _advanceLastEventId(eventId, revision) {
            if (this.lastEventId < eventId) {
                this.descriptor.last_event_id = eventId;
                if (revision) {
                    this.descriptor.revision = revision;
                }
            }
        }
        /**
         * Handle entity insertion event, coming from server
         * @private
         */

    }, {
        key: "_handleItemAdded",
        value: function _handleItemAdded(key, url, eventId, revision, value) {
            if (!this.cache.has(key) && !this.shouldIgnoreEvent(key, eventId)) {
                var item = new mapitem_1.MapItem({ key: key, url: url, last_event_id: eventId, revision: revision, data: value });
                this.cache.store(key, item, eventId);
                this.emit('itemAdded', item, false);
                this.emit('itemAddedRemotely', item);
            }
        }
        /**
         * Handle new value of entity, coming from server
         * @private
         */

    }, {
        key: "_handleItemUpdated",
        value: function _handleItemUpdated(key, url, eventId, revision, value) {
            var item = this.cache.get(key);
            if (!item && !this.shouldIgnoreEvent(key, eventId)) {
                item = new mapitem_1.MapItem({ key: key, url: url, last_event_id: eventId, revision: revision, data: value });
                this.cache.store(key, item, eventId);
                this.emit('itemUpdated', item, false);
                this.emit('itemUpdatedRemotely', item);
            } else if (item && eventId > item.lastEventId) {
                item.update(eventId, revision, value);
                this.emit('itemUpdated', item, false);
                this.emit('itemUpdatedRemotely', item);
            }
        }
        /**
         * @private
         */

    }, {
        key: "_handleItemRemoved",
        value: function _handleItemRemoved(key, eventId, oldData) {
            this.cache.delete(key, eventId);
            this.emit('itemRemoved', key, false);
            this.emit('itemRemovedRemotely', key, oldData);
        }
    }, {
        key: "_handleContextUpdate",
        value: function _handleContextUpdate(data, eventId) {
            if (this.lastEventId < eventId) {
                this.context = data;
                this.emit('contextUpdated', data, false);
                this.emit('contextUpdatedRemotely', data);
            }
        }
    }, {
        key: "onRemoved",
        value: function onRemoved(locally) {
            this._unsubscribe();
            this.removalHandler(this.type, this.sid, this.uniqueName);
            //
            // Should also do some cleanup here
            this.emit('collectionRemoved', locally);
            if (!locally) {
                this.emit('collectionRemovedRemotely');
            }
        }
        /**
         * Delete this map. It will be impossible to restore it.
         * @return {Promise<void>} A promise that resolves when the map has been deleted.
         * @public
         */

    }, {
        key: "removeMap",
        value: function removeMap() {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee13() {
                return _regenerator2.default.wrap(function _callee13$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                _context13.next = 2;
                                return this.services.network.delete(this.uri);

                            case 2:
                                this.onRemoved(true);

                            case 3:
                            case "end":
                                return _context13.stop();
                        }
                    }
                }, _callee13, this);
            }));
        }
    }, {
        key: "uri",
        get: function get() {
            return this.descriptor.url;
        }
    }, {
        key: "links",
        get: function get() {
            return this.descriptor.links;
        }
    }, {
        key: "revision",
        get: function get() {
            return this.descriptor.revision;
        }
    }, {
        key: "lastEventId",
        get: function get() {
            return this.descriptor.last_event_id;
        }
    }, {
        key: "type",
        get: function get() {
            return 'map';
        }
        // public props, documented along with class description

    }, {
        key: "sid",
        get: function get() {
            return this.descriptor.sid;
        }
    }, {
        key: "uniqueName",
        get: function get() {
            return this.descriptor.unique_name || null;
        }
    }], [{
        key: "type",
        get: function get() {
            return 'map';
        }
    }]);
    return SyncMap;
}(entity_1.SyncEntity);

exports.SyncMap = SyncMap;
// export { SyncMap, MapDescriptor, Mutator };
exports.default = SyncMap;
/**
 * Applies a transformation to the item value. May be called multiple times on the
 * same datum in case of collisions with remote code.
 * @callback Map~Mutator
 * @param {Object} data The current value of the item in the cloud.
 * @return {Object} The desired new value for the item.
 */
/**
 * Fired when a new item appears in the map, whether its creator was local or remote.
 * @event Map#itemAdded
 * @param {MapItem} - Added item
 * @param {Boolean} - Equals 'true' if item was added by local actor, 'false' otherwise
 */
/**
 * Fired when remote code creates a new item in the map.
 * @event Map#itemAddedRemotely
 * @param {MapItem} - Added item
 */
/**
 * Fired when a map item is updated (not added or removed, but changed), whether the updater was local or remote.
 * @event Map#itemUpdated
 * @param {MapItem} - Updated item
 * @param {Boolean} - Equals 'true' if item was updated by local actor, 'false' otherwise
 */
/**
 * Fired when a remote actor updates a map item.
 * @event Map#itemUpdatedRemotely
 * @param {MapItem} - Updated item
 */
/**
 * Fired when a map item is removed, whether the remover was local or remote.
 * @event Map#itemRemoved
 * @param {String} - A key of removed item
 * @param {Boolean} - Equals 'true' if item was removed by local actor, 'false' otherwise
 */
/**
 * Fired when a remote actor removes a map item.
 * @event Map#itemRemovedRemotely
 * @param {String} - A key of removed item
 * @param {Object} - A snapshot of item data before removal
 */
/**
 * Fired when a map is deleted entirely, by any actor local or remote.
 * @event Map#collectionRemoved
 * @param {Boolean} - Equals 'true' if map was removed by local actor, 'false' otherwise
 */
/**
 * Fired when remote code deletes a map.
 * @event Map#collectionRemovedRemotely
 */