"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const entity_1 = require("./entity");
const retryingqueue_1 = require("./retryingqueue");
const mapitem_1 = require("./mapitem");
const paginator_1 = require("./paginator");
const cache_1 = require("./cache");
/**
 * @class
 * @alias Map
 * @classdesc Represents a Sync Map, which stores an unordered set of key:value pairs.
 * @property {String} sid An immutable identifier (a SID) assigned by the system on creation.
 * @property {String} [uniqueName=null] - An optional immutable identifier that may be assigned by the
 * programmer to this map on creation. Unique among other Maps.
 *
 *
 * @fires Map#collectionRemoved
 * @fires Map#collectionRemovedRemotely
 * @fires Map#itemAdded
 * @fires Map#itemAddedRemotely
 * @fires Map#itemRemoved
 * @fires Map#itemRemovedRemotely
 * @fires Map#itemUpdated
 * @fires Map#itemUpdatedRemotely
 */
class SyncMap extends entity_1.SyncEntity {
    /**
     * @private
     */
    constructor(services, descriptor, removalHandler) {
        super(services, removalHandler);
        this.actionQueue = new retryingqueue_1.RetryingQueue();
        this.cache = new cache_1.Cache();
        this.descriptor = descriptor;
        if (descriptor.items) {
            descriptor.items.forEach(itemDescriptor => {
                this.cache.store(itemDescriptor.key, new mapitem_1.MapItem(itemDescriptor), itemDescriptor.last_event_id);
            });
        }
    }
    // private props
    get uri() { return this.descriptor.url; }
    get links() { return this.descriptor.links; }
    get revision() { return this.descriptor.revision; }
    get lastEventId() { return this.descriptor.last_event_id; }
    static get type() { return 'map'; }
    get type() { return 'map'; }
    // public props, documented along with class description
    get sid() { return this.descriptor.sid; }
    get uniqueName() { return this.descriptor.unique_name || null; }
    _get(key) {
        return this.queryItems({ key: key }).then(result => {
            if (result.items.length < 1) {
                throw new Error('No item with key ' + key + ' found');
            }
            return result.items[0];
        });
    }
    __set(location, param) {
        return this.services.network.post(location, { data: param.data }, param.revision)
            .then(response => {
            response = response.body;
            response.data = param.data;
            return response;
        });
    }
    /**
     * Update known existing element
     * @private
     */
    _set(location, keyValue, resolver) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!resolver) {
                return this.__set(location, { data: keyValue.data });
            }
            let _resolver = (err) => __awaiter(this, void 0, void 0, function* () {
                if (err.status === 412) {
                    let item = yield this._get(keyValue.key);
                    return {
                        revision: item.revision,
                        data: resolver(utils_1.deepClone(item.value))
                    };
                }
                throw err;
            });
            return this.actionQueue
                .add(this.__set.bind(this), location, { revision: keyValue.revision, data: keyValue.data }, _resolver);
        });
    }
    /**
     * Create element or update if already existing
     * @private
     */
    _tryAddOrUpdate(uri, keyValue, resolver) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let response = yield this.services.network.post(uri, keyValue);
                response.body.data = keyValue.data;
                return { added: true, value: response.body };
            }
            catch (err) {
                if (err.status !== 409) {
                    throw err;
                }
                const existingItemLocation = err.body.links.item;
                if (!resolver) {
                    let value = yield this._set(existingItemLocation, keyValue, resolver);
                    return { added: false, value: value };
                }
                else {
                    let response = yield this.services.network.get(existingItemLocation);
                    const resolvedData = resolver(utils_1.deepClone(response.body.data));
                    let value = yield this._set(existingItemLocation, {
                        key: response.body.key,
                        revision: response.body.revision,
                        data: resolvedData
                    }, resolver);
                    return { added: false, value: value };
                }
            }
        });
    }
    /**
     * @return Promise<Object> Context of collection
     * @private
     */
    getContext() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.context) {
                let response = yield this.services.network.get(this.links.context);
                // store fetched context if we have't received any newer update
                if (!this.context || response.body.last_event_id > this.lastEventId) {
                    this.context = response.body.data;
                }
            }
            return this.context;
        });
    }
    /**
     * @param context {Object} New context value
     * @returns {Promise}
     * @private
     */
    updateContext(context) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.services.network.post(this.links.context, { data: context });
            this.context = context;
            this.emit('contextUpdated', context, true);
        });
    }
    /**
     * Add a new item to the map with the given key:value pair. Overwrites any value that might already exist at that key.
     * @param {String} key Unique item identifier
     * @param {Object} value Value to be set
     * @returns {Promise<MapItem>} Newly added item, or modified one if already exists, with the latest known value.
     * @public
     */
    set(key, value) {
        return this._actualSet(key, value);
    }
    /**
     * @private
     */
    _actualSet(key, value, resolver) {
        return __awaiter(this, void 0, void 0, function* () {
            let descriptor;
            let added;
            let item = this.cache.get(key);
            if (item) {
                let arg = { key: key, data: value, revision: item.revision || undefined };
                descriptor = yield this._set(item.uri, arg, resolver);
                added = false;
            }
            else {
                let addOrUpdateResult = yield this._tryAddOrUpdate(this.links.items, { key: key, data: value }, resolver);
                descriptor = addOrUpdateResult.value;
                added = addOrUpdateResult.added;
            }
            item = this.cache.get(key);
            if (item && descriptor.last_event_id > item.lastEventId) {
                item.update(descriptor.last_event_id, descriptor.revision, descriptor.data);
                this.emit('itemUpdated', item, true);
            }
            else if (!item) {
                item = this.cache.store(key, new mapitem_1.MapItem(descriptor), descriptor.last_event_id);
                if (added) {
                    this.emit('itemAdded', item, true);
                }
                else {
                    this.emit('itemUpdated', item, true);
                }
            }
            return item;
        });
    }
    /**
     * Retrieve an item by key.
     * @param {String} key Identifies the desired item.
     * @returns {Promise<MapItem>} A promise that resolves when the item has been fetched.
     * This promise will be rejected if item was not found.
     * @public
     */
    get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.cache.has(key)) {
                return this.cache.get(key);
            }
            let result = yield this.queryItems({ key: key });
            if (result.items.length < 1) {
                throw new Error('No item with key ' + key + ' found');
            }
            return result.items[0];
        });
    }
    /**
     * Schedules a modification to this document that will apply a mutation function.
     * @param {String} key selects the map item to be mutated.
     * @param {Map~Mutator} mutator A function that outputs a new value based on the existing value.
     * May be called multiple times, particularly if this Document is modified concurrently by remote code.
     * If the mutation ultimately succeeds, the Document will have made the particular transition described
     * by this function.
     * @returns {Promise<MapItem>} Resolves with the modified item, with its latest contents.
     * @public
     */
    mutate(key, mutator) {
        return __awaiter(this, void 0, void 0, function* () {
            let value = yield this.get(key).then(item => item.value).catch(() => ({}));
            return this._actualSet(key, mutator(utils_1.deepClone(value)), mutator);
        });
    }
    /**
     * Modify the keyed map item by appending new fields (or by overwriting existing ones) with the values from
     * the provided Object. Creates a new item if no item by this key exists, copying all given fields and values
     * into it.
     * @param {String} key selects the map item to update.
     * @param {Object} obj Specifies the particular (top-level) attributes that will receive new values.
     * @returns {Promise<MapItem>} A promise resolving to the modified item in its new state.
     * @public
     */
    update(key, obj) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.mutate(key, remote => Object.assign(remote, obj));
        });
    }
    /**
     * Delete an item, given its key.
     * @param {String} key selects the item to delete.
     * @returns {Promise<void>} A promise to remove an item.
     * The promise will be rejected if 'key' is undefined or an item was not found.
     * @public
     */
    remove(key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof key === 'undefined') {
                throw new Error('Key argument is invalid');
            }
            let item = yield this.get(key);
            let response = yield this.services.network.delete(item.uri);
            this.cache.delete(key, response.body.last_event_id);
            this.emit('itemRemoved', key, true);
        });
    }
    /**
     * @private
     */
    queryItems(args) {
        return __awaiter(this, void 0, void 0, function* () {
            args = args || {};
            const uri = new utils_1.UriBuilder(this.links.items)
                .queryParam('From', args.from)
                .queryParam('PageSize', args.limit)
                .queryParam('Key', args.key)
                .queryParam('PageToken', args.pageToken)
                .queryParam('Order', args.order)
                .build();
            let response = yield this.services.network.get(uri);
            let items = response.body.items.map(el => {
                let itemInCache = this.cache.get(el.key);
                if (itemInCache) {
                    this._handleItemUpdated(el.key, el.url, el.last_event_id, el.revision, el.data);
                }
                else {
                    this.cache.store(el.key, new mapitem_1.MapItem(el), el.last_event_id);
                }
                return this.cache.get(el.key);
            });
            const meta = response.body.meta;
            return new paginator_1.Paginator(items, pageToken => this.queryItems({ pageToken }), meta.previous_token, meta.next_token);
        });
    }
    /**
     * Get a complete list of items from the map.
     * @param {Object} args Arguments for query
     * @param {String} args.from Item, which should be used as an anchor. If undefined, starts from the beginning or end depending on args.order
     * @param {Number} args.pageSize Result page size
     * @param {String} args.order Lexicographical order of results, should be 'asc' or 'desc'
     * @return {Promise<Paginator<MapItem>>}
     * @public
     */
    getItems(args) {
        return __awaiter(this, void 0, void 0, function* () {
            args = args || {};
            args.limit = args.pageSize || args.limit || 50;
            args.order = args.order || 'asc';
            return this.queryItems(args);
        });
    }
    /**
     * Enumerate all items in this Map.
     * This always triggers server interaction when being called for the first time on a Map; this may be latent.
     * This method not supported now and not meant to be used externally.
     * @param {Function} handler Function to handle each argument
     * @private
     */
    forEach(handler) {
        return new Promise((resolve, reject) => {
            function processPage(page) {
                page.items.forEach(x => handler(x));
                if (page.hasNextPage) {
                    page.nextPage().then(processPage).catch(reject);
                }
                else {
                    resolve();
                }
            }
            this.queryItems().then(processPage).catch(reject);
        });
    }
    shouldIgnoreEvent(key, eventId) {
        return this.cache.isKnown(key, eventId);
    }
    /**
     * Handle update from the server
     * @private
     */
    _update(update, isStrictlyOrdered) {
        switch (update.type) {
            case 'map_item_added':
                {
                    this._handleItemAdded(update.item_key, update.item_url, update.id, update.item_revision, update.item_data);
                }
                break;
            case 'map_item_updated':
                {
                    this._handleItemUpdated(update.item_key, update.item_url, update.id, update.item_revision, update.item_data);
                }
                break;
            case 'map_item_removed':
                {
                    this._handleItemRemoved(update.item_key, update.id, update.item_data);
                }
                break;
            case 'map_context_updated':
                {
                    this._handleContextUpdate(update.context_data, update.id);
                }
                break;
            case 'map_removed':
                {
                    this.onRemoved(false);
                }
                break;
        }
        if (isStrictlyOrdered) {
            this._advanceLastEventId(update.id, update.map_revision);
        }
    }
    _advanceLastEventId(eventId, revision) {
        if (this.lastEventId < eventId) {
            this.descriptor.last_event_id = eventId;
            if (revision) {
                this.descriptor.revision = revision;
            }
        }
    }
    /**
     * Handle entity insertion event, coming from server
     * @private
     */
    _handleItemAdded(key, url, eventId, revision, value) {
        if (!this.cache.has(key) && !this.shouldIgnoreEvent(key, eventId)) {
            let item = new mapitem_1.MapItem({ key, url, last_event_id: eventId, revision, data: value });
            this.cache.store(key, item, eventId);
            this.emit('itemAdded', item, false);
            this.emit('itemAddedRemotely', item);
        }
    }
    /**
     * Handle new value of entity, coming from server
     * @private
     */
    _handleItemUpdated(key, url, eventId, revision, value) {
        let item = this.cache.get(key);
        if (!item && !this.shouldIgnoreEvent(key, eventId)) {
            item = new mapitem_1.MapItem({ key, url, last_event_id: eventId, revision, data: value });
            this.cache.store(key, item, eventId);
            this.emit('itemUpdated', item, false);
            this.emit('itemUpdatedRemotely', item);
        }
        else if (item && eventId > item.lastEventId) {
            item.update(eventId, revision, value);
            this.emit('itemUpdated', item, false);
            this.emit('itemUpdatedRemotely', item);
        }
    }
    /**
     * @private
     */
    _handleItemRemoved(key, eventId, oldData) {
        this.cache.delete(key, eventId);
        this.emit('itemRemoved', key, false);
        this.emit('itemRemovedRemotely', key, oldData);
    }
    _handleContextUpdate(data, eventId) {
        if (this.lastEventId < eventId) {
            this.context = data;
            this.emit('contextUpdated', data, false);
            this.emit('contextUpdatedRemotely', data);
        }
    }
    onRemoved(locally) {
        this._unsubscribe();
        this.removalHandler(this.type, this.sid, this.uniqueName);
        //
        // Should also do some cleanup here
        this.emit('collectionRemoved', locally);
        if (!locally) {
            this.emit('collectionRemovedRemotely');
        }
    }
    /**
     * Delete this map. It will be impossible to restore it.
     * @return {Promise<void>} A promise that resolves when the map has been deleted.
     * @public
     */
    removeMap() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.services.network.delete(this.uri);
            this.onRemoved(true);
        });
    }
}
exports.SyncMap = SyncMap;
// export { SyncMap, MapDescriptor, Mutator };
exports.default = SyncMap;
/**
 * Applies a transformation to the item value. May be called multiple times on the
 * same datum in case of collisions with remote code.
 * @callback Map~Mutator
 * @param {Object} data The current value of the item in the cloud.
 * @return {Object} The desired new value for the item.
 */
/**
 * Fired when a new item appears in the map, whether its creator was local or remote.
 * @event Map#itemAdded
 * @param {MapItem} - Added item
 * @param {Boolean} - Equals 'true' if item was added by local actor, 'false' otherwise
 */
/**
 * Fired when remote code creates a new item in the map.
 * @event Map#itemAddedRemotely
 * @param {MapItem} - Added item
 */
/**
 * Fired when a map item is updated (not added or removed, but changed), whether the updater was local or remote.
 * @event Map#itemUpdated
 * @param {MapItem} - Updated item
 * @param {Boolean} - Equals 'true' if item was updated by local actor, 'false' otherwise
 */
/**
 * Fired when a remote actor updates a map item.
 * @event Map#itemUpdatedRemotely
 * @param {MapItem} - Updated item
 */
/**
 * Fired when a map item is removed, whether the remover was local or remote.
 * @event Map#itemRemoved
 * @param {String} - A key of removed item
 * @param {Boolean} - Equals 'true' if item was removed by local actor, 'false' otherwise
 */
/**
 * Fired when a remote actor removes a map item.
 * @event Map#itemRemovedRemotely
 * @param {String} - A key of removed item
 * @param {Object} - A snapshot of item data before removal
 */
/**
 * Fired when a map is deleted entirely, by any actor local or remote.
 * @event Map#collectionRemoved
 * @param {Boolean} - Equals 'true' if map was removed by local actor, 'false' otherwise
 */
/**
 * Fired when remote code deletes a map.
 * @event Map#collectionRemovedRemotely
 */
