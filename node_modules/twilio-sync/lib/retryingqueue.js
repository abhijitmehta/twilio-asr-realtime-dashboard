"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class RetryingQueue {
    constructor() {
        this.queue = new Array();
        this.isActive = false;
    }
    wakeupQueue() {
        if (!this.isActive && this.queue.length > 0) {
            this.isActive = true;
            setTimeout(() => this.executeTask(this.queue[0]), 0);
        }
    }
    pickNext() {
        this.queue.shift();
        if (this.queue.length === 0) {
            this.isActive = false;
            return;
        }
        setTimeout(() => this.executeTask(this.queue[0]), 0);
    }
    pickSame(arg) {
        this.queue[0].arg = arg;
        setTimeout(() => this.executeTask(this.queue[0]), 0);
    }
    executeTask(task) {
        task.task(task.context, task.arg).then(result => {
            this.pickNext();
            task.resolve(result);
        }).catch((error) => {
            try {
                if (task.handle) {
                    task.handle(error)
                        .then(result => this.pickSame(result))
                        .catch(task.reject);
                }
                else {
                    throw error;
                }
            }
            catch (e) {
                task.reject(error);
            }
        });
    }
    add(task, context, arg, errorHandler) {
        return new Promise((resolve, reject) => {
            this.queue.push({
                task: task,
                context: context,
                arg: arg,
                handle: errorHandler,
                resolve: resolve,
                reject: reject
            });
            this.wakeupQueue();
        });
    }
}
exports.RetryingQueue = RetryingQueue;
Object.freeze(RetryingQueue);
exports.default = RetryingQueue;
