"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const logger_1 = require("./logger");
const entity_1 = require("./entity");
const retryingqueue_1 = require("./retryingqueue");
const listitem_1 = require("./listitem");
const paginator_1 = require("./paginator");
const cache_1 = require("./cache");
/**
 * @class
 * @alias List
 * @classdesc Represents a Sync List, which stores an ordered list of values.
 * @property {String} sid - List unique id, immutable identifier assigned by the system
 * @property {String} [uniqueName=null] - List unique name, immutable identifier that can be assigned to list during creation
 *
 * @fires List#collectionRemoved
 * @fires List#collectionRemovedRemotely
 * @fires List#itemAdded
 * @fires List#itemAddedRemotely
 * @fires List#itemRemoved
 * @fires List#itemRemovedRemotely
 * @fires List#itemUpdated
 * @fires List#itemUpdatedRemotely
 */
class SyncList extends entity_1.SyncEntity {
    /**
     * @private
     */
    constructor(services, descriptor, removalHandler) {
        super(services, removalHandler);
        this.actionQueue = new retryingqueue_1.RetryingQueue();
        this.cache = new cache_1.Cache();
        this.descriptor = descriptor;
    }
    // private props
    get uri() { return this.descriptor.url; }
    get revision() { return this.descriptor.revision; }
    get lastEventId() { return this.descriptor.last_event_id; }
    get links() { return this.descriptor.links; }
    static get type() { return 'list'; }
    get type() { return 'list'; }
    // public props, documented along with class description
    get sid() { return this.descriptor.sid; }
    get uniqueName() { return this.descriptor.unique_name || null; }
    __set(location, param) {
        return __awaiter(this, void 0, void 0, function* () {
            let response = yield this.services.network.post(location, { data: param.data }, param.revision);
            response.body.data = param.data;
            return response.body;
        });
    }
    /**
     * Add a new item to the list.
     * @param {Object} value Value to be added
     * @returns {Promise<ListItem>} A newly added item.
     * @public
     */
    push(value) {
        return __awaiter(this, void 0, void 0, function* () {
            let response = yield this.services.network.post(this.links.items, { data: value });
            let index = Number(response.body.index);
            let item = this.cache.store(index, new listitem_1.ListItem({ index: index,
                revision: response.body.revision,
                lastEventId: response.body.last_event_id,
                uri: response.body.url,
                value: value }), response.body.last_event_id);
            this.emit('itemAdded', item, true);
            return item;
        });
    }
    /**
     * Assign new value to an existing item, given its index.
     * @param {Number} index Index of an item to be updated
     * @param {Object} value New value to be assigned to an item
     * @returns {Promise<ListItem>} A promise with updated item containing latest known value.
     * A promise will be rejected if value was remotely modified.
     * @public
     */
    set(index, value) {
        return this._actualSet(index, value);
    }
    /**
     * @private
     */
    _actualSet(index, value, resolver) {
        return __awaiter(this, void 0, void 0, function* () {
            let item = yield this.get(index);
            let updatedItemDescriptor;
            if (!resolver) {
                updatedItemDescriptor = yield this.__set(item.uri, { data: value, revision: undefined });
            }
            else {
                let _resolver = (err) => __awaiter(this, void 0, void 0, function* () {
                    if (err.status === 412) {
                        let refreshedItem = yield this._get(item.index);
                        return {
                            revision: refreshedItem.revision,
                            data: resolver(utils_1.deepClone(refreshedItem.value))
                        };
                    }
                    throw err;
                });
                updatedItemDescriptor = yield this.actionQueue.add(this.__set.bind(this), item.uri, { revision: item.revision, data: value }, _resolver);
            }
            item = this.cache.get(item.index);
            if (item && updatedItemDescriptor.last_event_id > item.lastEventId) {
                item.update(updatedItemDescriptor.last_event_id, updatedItemDescriptor.revision, updatedItemDescriptor.data);
                this.emit('itemUpdated', item, true);
            }
            return item;
        });
    }
    /**
     * Modify an existing item by applying a mutation function to it.
     * @param {Number} index Index of an item to be changed
     * @param {List~Mutator} mutator A function that outputs a new value based on the existing value
     * @returns {Promise<ListItem>} A promise with a modified item containing latest known value.
     * A promise will be rejected if an item was not found.
     * @public
     */
    mutate(index, mutator) {
        return __awaiter(this, void 0, void 0, function* () {
            let item = yield this.get(index);
            return this._actualSet(index, mutator(utils_1.deepClone(item.value)), mutator);
        });
    }
    /**
     * Modify an existing item by appending new fields (or overwriting existing ones) with the values from Object.
     * @param {Number} index Index of an item to be changed
     * @param {Object} obj Set of fields to update
     * @returns {Promise<ListItem>} A promise with a modified item containing latest known value.
     * A promise will be rejected if an item was not found.
     * @public
     */
    update(index, obj) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.mutate(index, remote => Object.assign(remote, obj));
        });
    }
    /**
     * Delete an item, given its key.
     * @param {number} index Index of an item to be removed
     * @returns {Promise<void>} A promise to remove an item.
     * A promise will be rejected if an item was not found.
     * @public
     */
    remove(index) {
        return __awaiter(this, void 0, void 0, function* () {
            let item = yield this.get(index);
            let response = yield this.services.network.delete(item.uri);
            this.cache.delete(index, response.body.last_event_id);
            this.emit('itemRemoved', index, true);
        });
    }
    /**
     * Retrieve an item by List key.
     * @param {Number} index Item index in a List
     * @returns {Promise<ListItem>} A promise with an item containing latest known value.
     * A promise will be rejected if an item was not found.
     * @public
     */
    get(index) {
        return __awaiter(this, void 0, void 0, function* () {
            let cachedItem = this.cache.get(index);
            if (cachedItem) {
                return cachedItem;
            }
            return this._get(index);
        });
    }
    _get(index) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = yield this.queryItems({ index });
            if (result.items.length < 1) {
                throw new Error('No item with index ' + index + ' found');
            }
            return result.items[0];
        });
    }
    /**
     * Query items from the List
     * @private
     */
    queryItems(arg) {
        return __awaiter(this, void 0, void 0, function* () {
            arg = arg || {};
            const url = new utils_1.UriBuilder(this.links.items)
                .queryParam('From', arg.from)
                .queryParam('PageSize', arg.limit)
                .queryParam('Index', arg.index)
                .queryParam('PageToken', arg.pageToken)
                .queryParam('Order', arg.order)
                .build();
            let response = yield this.services.network.get(url);
            let items = response.body.items.map(el => {
                let itemInCache = this.cache.get(el.index);
                if (itemInCache) {
                    this._handleItemUpdated(el.index, el.url, el.last_event_id, el.revision, el.data);
                }
                else {
                    this.cache.store(Number(el.index), new listitem_1.ListItem({ index: Number(el.index),
                        uri: el.url,
                        revision: el.revision,
                        lastEventId: el.last_event_id,
                        value: el.data }), el.last_event_id);
                }
                return this.cache.get(el.index);
            });
            let meta = response.body.meta;
            return new paginator_1.Paginator(items, pageToken => this.queryItems({ pageToken }), meta.previous_token, meta.next_token);
        });
    }
    /**
     * Query a list of items from collection.
     * @param {Object} args Arguments for query
     * @param {Number} args.from Item, which should be used as an anchor. If undefined, starts from the beginning or end depending on args.order
     * @param {Number} args.pageSize Results page size
     * @param {String} args.order Lexicographical order of results, should be 'asc' or 'desc'
     * @returns {Promise<Paginator<ListItem>>}
     * @public
     */
    getItems(args) {
        return __awaiter(this, void 0, void 0, function* () {
            args = args || {};
            args.limit = args.pageSize || args.limit || 50;
            args.order = args.order || 'asc';
            return this.queryItems(args);
        });
    }
    /**
     * @return {Promise<Object>} Context of List
     * @private
     */
    getContext() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.context) {
                let response = yield this.services.network.get(this.links.context);
                // store fetched context if we have't received any newer update
                if (!this.context || response.body.last_event_id > this.lastEventId) {
                    this.context = response.body.data;
                }
            }
            return this.context;
        });
    }
    /**
     * @private
     */
    updateContext(context) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.services.network.post(this.links.context, { data: context });
                this.context = context;
                this.emit('contextUpdated', context, true);
                return this;
            }
            catch (err) {
                logger_1.default.error('Failed to update context', err);
                throw err;
            }
        });
    }
    /**
     * Delete this list. It will be impossible to restore it.
     * @return {Promise<void>} A promise that resolves when the list has been deleted.
     * @public
     */
    removeList() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.services.network.delete(this.uri);
            this.onRemoved(true);
        });
    }
    onRemoved(locally) {
        this._unsubscribe();
        this.removalHandler(this.type, this.sid, this.uniqueName);
        // Should also do some cleanup here
        this.emit('collectionRemoved', locally);
        if (!locally) {
            this.emit('collectionRemovedRemotely');
        }
    }
    shouldIgnoreEvent(key, eventId) {
        return this.cache.isKnown(key, eventId);
    }
    /**
     * Handle update, which came from the server
     * @private
     */
    _update(update, isStrictlyOrdered) {
        const itemIndex = Number(update.item_index);
        switch (update.type) {
            case 'list_item_added':
                {
                    this._handleItemAdded(itemIndex, update.item_url, update.id, update.item_revision, update.item_data);
                }
                break;
            case 'list_item_updated':
                {
                    this._handleItemUpdated(itemIndex, update.item_url, update.id, update.item_revision, update.item_data);
                }
                break;
            case 'list_item_removed':
                {
                    this._handleItemRemoved(itemIndex, update.id, update.item_data);
                }
                break;
            case 'list_context_updated':
                {
                    this._handleContextUpdate(update.context_data, update.id);
                }
                break;
            case 'list_removed':
                {
                    this.onRemoved(false);
                }
                break;
        }
        if (isStrictlyOrdered) {
            this._advanceLastEventId(update.id, update.list_revision);
        }
    }
    _advanceLastEventId(eventId, revision) {
        if (this.lastEventId < eventId) {
            this.descriptor.last_event_id = eventId;
            if (revision) {
                this.descriptor.revision = revision;
            }
        }
    }
    /**
     * Handle item insertion event, coming from server
     * @private
     */
    _handleItemAdded(index, uri, eventId, revision, value) {
        if (!this.cache.isKnown(index, eventId)) {
            let item = new listitem_1.ListItem({ index, uri, lastEventId: eventId, revision, value });
            this.cache.store(index, item, eventId);
            this.emit('itemAdded', item, false);
            this.emit('itemAddedRemotely', item);
        }
    }
    /**
     * Handle new value of item, coming from server
     * @private
     */
    _handleItemUpdated(index, uri, eventId, revision, value) {
        let item = this.cache.get(index);
        if (!item && !this.shouldIgnoreEvent(index, eventId)) {
            item = this.cache.store(index, new listitem_1.ListItem({ index, uri, lastEventId: eventId, revision, value }), eventId);
            this.emit('itemUpdated', item, false);
            this.emit('itemUpdatedRemotely', item);
        }
        else if (item && eventId > item.lastEventId) {
            item.update(eventId, revision, value);
            this.emit('itemUpdated', item, false);
            this.emit('itemUpdatedRemotely', item);
        }
    }
    _handleItemRemoved(index, eventId, oldData) {
        this.cache.delete(index, eventId);
        this.emit('itemRemoved', index, false);
        this.emit('itemRemovedRemotely', index, oldData);
    }
    _handleContextUpdate(data, eventId) {
        if (this.lastEventId < eventId) {
            this.context = data;
            this.emit('contextUpdated', data, false);
            this.emit('contextUpdatedRemotely', data);
        }
    }
}
exports.SyncList = SyncList;
exports.default = SyncList;
/**
 * Applies a transformation to the item value. May be called multiple times on the
 * same datum in case of collisions with remote code.
 * @callback List~Mutator
 * @param {Object} data The current value of the item in the cloud.
 * @return {Object} The desired new value for the item.
 */
/**
 * Fired when a new item appears in the list, whether its creator was local or remote.
 * @event List#itemAdded
 * @param {ListItem} - Added item
 * @param {Boolean} - Equals 'true' if item was added by local actor, 'false' otherwise
 */
/**
 * Fired when remote code adds a new item to the list.
 * @event List#itemAddedRemotely
 * @param {ListItem} - Added item
 */
/**
 * Fired when a list item is updated (not added or removed, but changed), whether the updater was local or remote.
 * @event List#itemUpdated
 * @param {ListItem} - Updated item
 * @param {Boolean} - Equals 'true' if item was updated by local actor, 'false' otherwise
 */
/**
 * Fired when a remote actor updates a list item.
 * @event List#itemUpdatedRemotely
 * @param {ListItem} - Updated item
 */
/**
 * Fired when a list item is removed, whether the remover was local or remote.
 * @event List#itemRemoved
 * @param {Number} - An index of removed item
 * @param {Boolean} - Equals 'true' if item was removed by local actor, 'false' otherwise
 */
/**
 * Fired when a remote actor removes a list item.
 * @event List#itemRemovedRemotely
 * @param {Number} - An index of removed item
 * @param {Object} - A snapshot of item data before removal
 */
/**
 * Fired when a list is deleted entirely, by any actor local or remote.
 * @event List#collectionRemoved
 * @param {Boolean} - Equals 'true' if list was removed by local actor, 'false' otherwise
 */
/**
 * Fired when remote code deletes a list.
 * @event List#collectionRemovedRemotely
 */
